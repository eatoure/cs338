from sympy import lcm

p = 2104666216091960700957621566256099091190949023167787965514267307511824882728013048910941114845107300193669819446618917627919840736992209675125883992481710229191247971140603183291565289100684961011171045890243242460864996086465869259706454894971423685617693145451397390545763393142162782164260207513085282393354347430121643780586738792054317476541994112907602668225085426345377203275577871232660615220971358893118285130517036535917179850193564545601849238496943409


q = 2093205167177381352131754938216143414270156914356010211977602409345001327311615202461092460425438108196299496050680385503522542951376243368295885954577107356870843912391607657075971433969464271615182561102872231917089568789895403554760976159346321325685565971337840306762723761978455897192946692222408514212812694347903003257370565018863362958303525732450021448850398831692789983977221754629634135268249691537491930157658814731362971755900764811331592696723172799

# Public exponent 
e = 65537

# Private exponent
d = 4292162678878550954634844866201185612063023663112305123135759960895441438480916163728811449194711635747241822420556202428477454724222992542776912687983815206237171321306525316910686808274689397189662319069996597033285602303910035945541246529568513640090939388025093785215639204699678805182673877971883215224520043168583870913728147818896121803233768579911534608084549696928991433688399305695250002168645462600520710922592952126497135060467004170681316128239880407084618682955342533094073562837248389582840494900642080088593848435977672680492173698342597107080867087896890265173327658148126300985043703958081989724284997318359179580786509220214723718153253298298158705442195036650271132420124650271415054154341355777206668373381068103012467972748610258679725971998936928633840417102281245164610515415244367611701868972179883375980561889188032696877854800722172923776338700032569349505510703884387378913467752560728925198439905

# Modulus
n_private = 4405498198707359225601851623251430697370039338606930836712789158465874388086698761527542496529009983742885582308436701673507493230511695388889297377212499368391497343572782723753358308466559944615102338332843134481377558976231414163645622994288760997175297092809831817852145566371753768230049614581499276067240451506467888491535005303080533345108635595709734281531019615787306566688644270212676377693795205751676964052778723959127386265803606088141789715062521221392663236565990243272557646312851857046682005467971017428067662776994550934233121893533297852913089183371118089406934566064453090377142166948430756765172472739721138394092493822693452773937893123613891516123181948970662027626213210151723052941307201927850641200543316018720794586406618003791811499238989782340883995306008425630998496181323449366327747925003688527953883956817108144489403157480872036346857534399263188107608874842618844694381605129593782031131791

# 1. Check if p * q = n
n_calculated = p * q
assert n_calculated == n_private, "Modulus check failed!"
print("Modulus check passed: p * q = n")

# 2. Compute 位(n) (Carmichael's function)
lambda_n = lcm(p-1, q-1)

# 3. Check if e * d mod 位(n) = 1
assert (e * d) % lambda_n == 1, "Sanity check failed! e * d mod 位(n) != 1"
print("Sanity check passed: e * d mod 位(n) = 1")

# 4. Check Exponent1, Exponent2, and Coefficient
exp1 = d % (p - 1)
exp2 = d % (q - 1)
coefficient = pow(q, -1, p)  # Coefficient: q^(-1) mod p


assert exp1 == 1804912573706707161998889251694333540171275889178619513035359651556938735126150378991129033639616790405188288483731678707325309503657066395640631368989266521373204597738915737835662968145105770232248139099582540489006139662292159390928511901095242769775412482319985466848399224632939787386940452612385860298055974313977245607829416670427831684912182356954788787436936024183121518465863605244201360411130403953033049715282191806584879672863098832056101633447422225, "Exponent1 check failed!"
assert exp2 == 1926801472760576236783074906659830076943951602489510170712312442567647208031002492010167155348664185927921017108646956929230884059808575822500052061915759884003652909087210509001359975236520913586662776197460566319213000539970093386149280692812999170157821358208308164640963675311264002166087784025836373909644192012541686032430445029418040148093089351992194393164136446885437865074596896280603910437275113926213828381236298828126615455669704728217663192017010931, "Exponent2 check failed!"
assert coefficient == 1406840022106226702985560245790868039882975490207719206949221022009253395132791877641460986914247212873545968734390542694426966830476656711484524356267408547116432237894048855161392958170465803489685217545988138520287356428132678514473854099344616256451831397264650464152332541553304255814576792555297570046818985837758161262102237046807559231998128100224179036862356741535913617566596755412972891522323666787237003646316559411121846179976766701921678588805293257, "Coefficient check failed!"

print("Exponent1, Exponent2, and Coefficient checks passed!")
