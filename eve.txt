
eve.txt
Author: Elhadji Amadou Touré '25
CS 338: Computer Security; Fall 2024; Carleton College
Created 09/28/2024
Last Modified 09/29/2024

===== Diffie-Hellman Key Exchange =====
- Here is what we know:
	- Shared base g = 7
	- Prime modulus p = 97
	- Alice sends A = 53 to Bob
	- Bob sends B = 82 to Alice

- We are trying to find the shared secret 'K'

1. Finding Alice's Private Key
	We know A = g^a % p. Therefore: 7^a % 97 = 53
	We can simply compute 7^k % 97 for k = 1 to k = 96 until we get 53 (or set up an equation):
	- 7^1 % 97 = 7
   	- 7^2 % 97 = 49
   	- 7^3 % 97 = 52
   	- ...
   	- 7^22 % 97 = 53

	So, Alice's private key is a = 22.

2. Find Bob's Private Key
	We can do the same thing for Bob:
	B = g^b % p. So, 7^b % 97 = 82.
	Doing the same as above:
   	- 7^41 % 97 = 82

   	So, Bob's private key is b = 41.

3. Computing the Shared Secret K
	K = g^ab % p. We will now compute ab % 96 given 7^96 % 97 = 1:
		ab = 22 * 41 = 902
		902 % 96 = 38

	Now, K = 7^38 % 97.
	From earlier, 7^38 % 97 = 65


Therefore, the shared secret K = 65

- Where the Process Would Fail with Larger Integers:
	This would have been totally unfeasible to do with larger numbers. We somewhat brute-forced it, and the time required actually to perform these calculations is exponential in time, making this a nearly computationally impossible problem to solve with large numbers (or, rather, possible given enough time but give me a lever long enough and I could also lift the Earth).




===== RSA Encryption =====

To decipher the encrypted message sent from Alice to Bob and fully grasp the situation, we'll break down the process into key components:

	- Alice encoding: Alice encoded the message using hex. She proceeded to encrypt that encoded text. Both Alice and Bob generate their public-private key pairs. Alice’s message is encrypted using Bob's public key, which consists of two numbers: e_Bob and n_Bob. Bob’s private key is necessary for decryption. Alice encrypts her message using Bob’s public key. If the message M is transformed into a number smaller than n, it becomes C = M^e_Bob % n_Bob.

- Here is what we know:
	- Bob's public key: ((e, n) = (13, 162991))
	- Encrypted message (ciphertext):
		[17645, 100861, 96754, 160977, 120780, 90338, 130962, 74096, 128123, 25052, 119569, 39404, 6697, 82550, 126667, 151824, 80067, 75272, 72641, 43884, 5579, 29857, 33449, 46274, 59283, 109287, 22623, 84902, 6161, 109039, 75094, 56614, 13649, 120780, 133707, 66992, 128221]

- We want to decrypt the message sent from Alice to Bob.


1. Factor n to Find p and q :

   - n = 162991
   - After finding factors at calculator.net's prime factorization calculator tool, we find:
     - p = 389
     - q = 419

2. We then calculate (p-1)(q-1) = 162184

3. We then found that a candidate for e was 13 and this was verified using a Greatest Common Denominator tool online. Then using the "Extended Euclidean Algorithm", we also found d to be 124757 following the RSA protocol.

4. A Python script was then used to decrypt the data sent using d, n, and the data itself:

Python script:

import math

array = [17645, 100861, 96754, 160977, 120780, 90338, 130962, 74096,
         128123, 25052, 119569, 39404, 6697, 82550, 126667, 151824,
         80067, 75272, 72641, 43884, 5579, 29857, 33449, 46274,
         59283, 109287, 22623, 84902, 6161, 109039, 75094, 56614,
         13649, 120780, 133707, 66992, 128221]

newArray = []
d = 124757
n = 162991

for num in array:
    m = pow(int(num), d,n)
    newArray.append(m)
    
print(newArray)


This gave a series of integers: [17509, 24946, 8258, 28514, 11296, 25448, 25955, 27424, 29800, 26995, 8303, 30068, 11808, 26740, 29808, 29498, 12079, 30583, 30510, 29557, 29302, 25961, 27756, 24942, 25445, 30561, 29795, 26670, 26991, 12064, 21349, 25888, 31073, 11296, 16748, 26979, 25902]. Then, I proceeded to convert these numbers to ASCII by first converting them to Hex. See the python below.

Python script:
# Convert each integer to its hexadecimal equivalent and filter out invalid ASCII characters
ascii_chars = []
for num in newArray:
    hex_value = hex(num)[2:]  # Convert to hex and strip the '0x' prefix
    try:
        ascii_rep = bytes.fromhex(hex_value).decode('ascii')  # Attempt to decode as ASCII
        ascii_chars.append(ascii_rep)
    except (ValueError, UnicodeDecodeError):
        ascii_chars.append(f"Invalid ASCII for {hex_value}")

print(ascii_chars)

This eventually reads: "Dear Bob, check this out. https://www.surveillancewatch.io/ See ya, Alice."


- Point of Failure with Much Larger Integers:

The critical point of failure in our RSA decryption process would occur during the factorization of n as the security of RSA encryption largely depends on the computational difficulty of factorizing the product n of two large prime numbers, p and q. In our scenario, n = 162991 was relatively small and could be factorized easily through online tools. 
   

- Insecurity of Alice's Encoding Method (even in cases where Bob had higher numbers):
	1. Alice encoded the message using hex, which really isn't that safe. It's pretty basic and individuals (including myself) could guess that this occured.
	2. If Alice's encoding doesn't include proper padding, RSA encryption can be vulnerable to attacks.
	3. If the attacker knows or can guess parts of the plaintext, they might be able to find other encrypted messages or even the decryption key itself.
	4. If the encoding results in a predictable pattern or repeated chunks of data, these patterns could be exploited to break the encryption (similar to #1).