key-formats.txt
Author: Elhadji Amadou Touré '25
CS 338: Computer Security; Fall 2024; Carleton College
Created 10/02/2024
Last Modified 10/02/2024


# Private Key
-----BEGIN RSA PRIVATE KEY-----
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
-----END RSA PRIVATE KEY-----

# Public Key
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDCIMiDawsES8Qca51yrdyhoE1uycBPkR4Y0vfnEt80GBU2R+xY9F73LzD1ajElDXVLKguu3PfGC2vua87osttuATog1c0N6I0PLlgsAQ1GIQwpwubK+z2bcjxheRgBrQ72SEf9uGN7NrKy3Q6yb8NDe6YN+TAtVv7XEcPdWZ0vmu+nb83ht+wO93fxmCl7Iy8TZVH0UQW1BatuvFSmvG7/AZ5kAtmHdsUdD4ZAWUXFAyGFKs414ehADPf2X5OCRv3l4F7G56wR7PjC6+/XNjPrQXW+w2CKFDDryQeV+B0xis0L8RYwaXaSyCwY9ZkLZxa9DfKhsVO3CFEKaUEqd/hptugMXk8tlNH6TXaYp5Z/JzE1zUsMKbCdqXFe4NSS4B6mPU7lRFnELqz/RPRwzJyp87IwLe4m+7+d5NJQ54n1gPE/uBAdjL+aseJnHj2anG739DblH3HiNkYUv7PRK5IQmEyIfxfsYLNewXFoV/xIDxMmVFTwZMxdiX8y7HCEpI8= amadoutoure@Amadous-MacBook-Pro-2.local

========PRIVATE KEY========
In a private key, we should expect to see a version, a modulus number, a public exponent, a private exponent, 2 different prime numbers, 2 different exponents derived from taking the d % (p-1) and d % (q-1), a coefficient number and other optional “PrimeInfos”.


Decoding:
I went to the website and pasted the key into the decoder

Version:
ASN.1 Name: version
Value: 0 (indicates two prime integers were used)

Modulus:
ASN.1 Name: modulus (n)
Value: 4405498198707359225601851623251430697370039338606930836712789158465874388086698761527542496529009983742885582308436701673507493230511695388889297377212499368391497343572782723753358308466559944615102338332843134481377558976231414163645622994288760997175297092809831817852145566371753768230049614581499276067240451506467888491535005303080533345108635595709734281531019615787306566688644270212676377693795205751676964052778723959127386265803606088141789715062521221392663236565990243272557646312851857046682005467971017428067662776994550934233121893533297852913089183371118089406934566064453090377142166948430756765172472739721138394092493822693452773937893123613891516123181948970662027626213210151723052941307201927850641200543316018720794586406618003791811499238989782340883995306008425630998496181323449366327747925003688527953883956817108144489403157480872036346857534399263188107608874842618844694381605129593782031131791

Public Exponent:
ASN.1 Name: publicExponent (e)
Value: 65537

Private Exponent:
ASN.1 Name: privateExponent (d)
Value:


Prime1:
ASN.1 Name: prime1 (p)
Value:
2104666216091960700957621566256099091190949023167787965514267307511824882728013048910941114845107300193669819446618917627919840736992209675125883992481710229191247971140603183291565289100684961011171045890243242460864996086465869259706454894971423685617693145451397390545763393142162782164260207513085282393354347430121643780586738792054317476541994112907602668225085426345377203275577871232660615220971358893118285130517036535917179850193564545601849238496943409

Prime2:
ASN.1 Name: prime2 (q)
Value:
2093205167177381352131754938216143414270156914356010211977602409345001327311615202461092460425438108196299496050680385503522542951376243368295885954577107356870843912391607657075971433969464271615182561102872231917089568789895403554760976159346321325685565971337840306762723761978455897192946692222408514212812694347903003257370565018863362958303525732450021448850398831692789983977221754629634135268249691537491930157658814731362971755900764811331592696723172799

Exponent1:
ASN.1 Name: exponent1 (d mod (p - 1))
Value:
1804912573706707161998889251694333540171275889178619513035359651556938735126150378991129033639616790405188288483731678707325309503657066395640631368989266521373204597738915737835662968145105770232248139099582540489006139662292159390928511901095242769775412482319985466848399224632939787386940452612385860298055974313977245607829416670427831684912182356954788787436936024183121518465863605244201360411130403953033049715282191806584879672863098832056101633447422225

Exponent2:
ASN.1 Name: exponent2 (d mod (q - 1))
Value:
1926801472760576236783074906659830076943951602489510170712312442567647208031002492010167155348664185927921017108646956929230884059808575822500052061915759884003652909087210509001359975236520913586662776197460566319213000539970093386149280692812999170157821358208308164640963675311264002166087784025836373909644192012541686032430445029418040148093089351992194393164136446885437865074596896280603910437275113926213828381236298828126615455669704728217663192017010931

Coefficient:
ASN.1 Name: coefficient (q^(-1) mod p)
Value:
1406840022106226702985560245790868039882975490207719206949221022009253395132791877641460986914247212873545968734390542694426966830476656711484524356267408547116432237894048855161392958170465803489685217545988138520287356428132678514473854099344616256451831397264650464152332541553304255814576792555297570046818985837758161262102237046807559231998128100224179036862356741535913617566596755412972891522323666787237003646316559411121846179976766701921678588805293257

========PUBLIC KEY========

What we expect: Before converting, just the Algorithm Key(Modulus and publicExponent) comment. Then, after converting, the modulus and publicExponent

Decoding:
I changed our pub file to a pem file and then used the decoder to view the file.

Modulus (n):


publicExponent INTEGER: is the RSA public exponent e:
publicExponent INTEGER:  65537

======== Sanity Check ========


1. Modulus Consistency Check

2. RSA Key Pair Consistency Check
3. Exponent1, Exponent2, and Coefficient Checks

The script below was used:
##############################################
Python

from sympy import lcm

p = 2104666216091960700957621566256099091190949023167787965514267307511824882728013048910941114845107300193669819446618917627919840736992209675125883992481710229191247971140603183291565289100684961011171045890243242460864996086465869259706454894971423685617693145451397390545763393142162782164260207513085282393354347430121643780586738792054317476541994112907602668225085426345377203275577871232660615220971358893118285130517036535917179850193564545601849238496943409


q = 2093205167177381352131754938216143414270156914356010211977602409345001327311615202461092460425438108196299496050680385503522542951376243368295885954577107356870843912391607657075971433969464271615182561102872231917089568789895403554760976159346321325685565971337840306762723761978455897192946692222408514212812694347903003257370565018863362958303525732450021448850398831692789983977221754629634135268249691537491930157658814731362971755900764811331592696723172799

# Public exponent 
e = 65537

# Private exponent
d = 4292162678878550954634844866201185612063023663112305123135759960895441438480916163728811449194711635747241822420556202428477454724222992542776912687983815206237171321306525316910686808274689397189662319069996597033285602303910035945541246529568513640090939388025093785215639204699678805182673877971883215224520043168583870913728147818896121803233768579911534608084549696928991433688399305695250002168645462600520710922592952126497135060467004170681316128239880407084618682955342533094073562837248389582840494900642080088593848435977672680492173698342597107080867087896890265173327658148126300985043703958081989724284997318359179580786509220214723718153253298298158705442195036650271132420124650271415054154341355777206668373381068103012467972748610258679725971998936928633840417102281245164610515415244367611701868972179883375980561889188032696877854800722172923776338700032569349505510703884387378913467752560728925198439905

# Modulus
n_private = 4405498198707359225601851623251430697370039338606930836712789158465874388086698761527542496529009983742885582308436701673507493230511695388889297377212499368391497343572782723753358308466559944615102338332843134481377558976231414163645622994288760997175297092809831817852145566371753768230049614581499276067240451506467888491535005303080533345108635595709734281531019615787306566688644270212676377693795205751676964052778723959127386265803606088141789715062521221392663236565990243272557646312851857046682005467971017428067662776994550934233121893533297852913089183371118089406934566064453090377142166948430756765172472739721138394092493822693452773937893123613891516123181948970662027626213210151723052941307201927850641200543316018720794586406618003791811499238989782340883995306008425630998496181323449366327747925003688527953883956817108144489403157480872036346857534399263188107608874842618844694381605129593782031131791

# 1. Check if p * q = n
n_calculated = p * q
assert n_calculated == n_private, "Modulus check failed!"
print("Modulus check passed: p * q = n")

# 2. Compute λ(n) (Carmichael's function)
lambda_n = lcm(p-1, q-1)

# 3. Check if e * d mod λ(n) = 1
assert (e * d) % lambda_n == 1, "Sanity check failed! e * d mod λ(n) != 1"
print("Sanity check passed: e * d mod λ(n) = 1")

# 4. Check Exponent1, Exponent2, and Coefficient
exp1 = d % (p - 1)
exp2 = d % (q - 1)
coefficient = pow(q, -1, p)  # Coefficient: q^(-1) mod p


assert exp1 == 1804912573706707161998889251694333540171275889178619513035359651556938735126150378991129033639616790405188288483731678707325309503657066395640631368989266521373204597738915737835662968145105770232248139099582540489006139662292159390928511901095242769775412482319985466848399224632939787386940452612385860298055974313977245607829416670427831684912182356954788787436936024183121518465863605244201360411130403953033049715282191806584879672863098832056101633447422225, "Exponent1 check failed!"
assert exp2 == 1926801472760576236783074906659830076943951602489510170712312442567647208031002492010167155348664185927921017108646956929230884059808575822500052061915759884003652909087210509001359975236520913586662776197460566319213000539970093386149280692812999170157821358208308164640963675311264002166087784025836373909644192012541686032430445029418040148093089351992194393164136446885437865074596896280603910437275113926213828381236298828126615455669704728217663192017010931, "Exponent2 check failed!"
assert coefficient == 1406840022106226702985560245790868039882975490207719206949221022009253395132791877641460986914247212873545968734390542694426966830476656711484524356267408547116432237894048855161392958170465803489685217545988138520287356428132678514473854099344616256451831397264650464152332541553304255814576792555297570046818985837758161262102237046807559231998128100224179036862356741535913617566596755412972891522323666787237003646316559411121846179976766701921678588805293257, "Coefficient check failed!"

print("Exponent1, Exponent2, and Coefficient checks passed!")
##############################################

Result:
amadoutoure@Amadous-MacBook-Pro-2 cs338 % python3 sanitycheck.py
Modulus check passed: p * q = n
Sanity check passed: e * d mod λ(n) = 1
Exponent1, Exponent2, and Coefficient checks passed!

These checks ensure that the CRT values were calculated correctly. All checks passed, confirming the correctness of the derived values in the private key.
1. The modulus n was consistent across the public and private keys.
2. The RSA key pair was validated by checking the relationship \( e \times d \mod \lambda(n) = 1 \), making sure the public and private keys are properly paired.
3. The Exponent1, Exponent2, and Coefficient values in the private key were correct, based on their mathematical relationships with d, p, and q.
